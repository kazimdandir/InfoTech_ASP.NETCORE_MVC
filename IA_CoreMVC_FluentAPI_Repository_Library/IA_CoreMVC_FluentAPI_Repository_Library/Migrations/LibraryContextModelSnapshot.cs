// <auto-generated />
using System;
using IA_CoreMVC_FluentAPI_Repository_Library.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IA_CoreMVC_FluentAPI_Repository_Library.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"), 1L, 1);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Book Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("IsbnNo")
                        .HasMaxLength(13)
                        .HasColumnType("bigint");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int")
                        .HasColumnName("Page Count");

                    b.Property<int?>("TypeID")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Book Type");

                    b.Property<int?>("WriterID")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Writer");

                    b.HasKey("BookID");

                    b.HasIndex("TypeID");

                    b.HasIndex("WriterID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.BookType", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeID");

                    b.ToTable("BookType");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Operation", b =>
                {
                    b.Property<int>("OperationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationID"), 1L, 1);

                    b.Property<int?>("BookID")
                        .HasColumnType("int")
                        .HasColumnName("Book");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Delivery Date");

                    b.Property<bool?>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("Purchase Date");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("Student");

                    b.HasKey("OperationID");

                    b.HasIndex("BookID");

                    b.HasIndex("StudentID");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Birth Date");

                    b.Property<string>("Gender")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short?>("Point")
                        .HasColumnType("smallint");

                    b.Property<string>("SchoolRoom")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Class");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("StudentSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname");

                    b.HasKey("StudentID");

                    b.ToTable("Student");

                    b.HasCheckConstraint("CK_Student_Point", "[Point] >= 0 AND [Point] <= 100");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Writer", b =>
                {
                    b.Property<int>("WriterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriterID"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("WriterSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname");

                    b.HasKey("WriterID");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Book", b =>
                {
                    b.HasOne("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.BookType", "Type")
                        .WithMany("Books")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Writer", "Writer")
                        .WithMany("Books")
                        .HasForeignKey("WriterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Operation", b =>
                {
                    b.HasOne("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Book", "Book")
                        .WithMany("Operations")
                        .HasForeignKey("BookID");

                    b.HasOne("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Student", "Student")
                        .WithMany("Operations")
                        .HasForeignKey("StudentID");

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Book", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.BookType", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Student", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("IA_CoreMVC_FluentAPI_Repository_Library.Models.Entities.Writer", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
